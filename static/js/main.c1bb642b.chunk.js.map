{"version":3,"sources":["component/Title.js","component/Tap.js","component/Todo.js","component/Todolist.js","component/App.js","reportWebVitals.js","index.js"],"names":["Title","props","className","isDarkOn","Tap","onClick","turnOnDarkMode","Todo","todo","type","Todolist","this","onChange","handleChange","placeholder","PostToDo","texting","allList","map","React","Component","App","state","bind","listPush","setState","e","target","value","val","length","alert","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAkBeA,MAbf,SAAeC,GACb,OACE,oBAAIC,UAAWD,EAAME,SAAW,aAAe,QAA/C,wBCYWC,MAdf,SAAaH,GACX,OACE,8BACE,yBACAC,UAAWD,EAAME,SAAW,kBAAoB,aAChDE,QAASJ,EAAMK,eAFf,UAIE,yBAJF,yBCGSC,MATf,SAAcN,GACZ,OACE,qBAAIC,UAAWD,EAAME,SAAW,YAAc,OAA9C,UACGF,EAAMO,KACP,uBAAOC,KAAK,iBC0BHC,E,kDA5Bb,WAAYT,GAAQ,uCACZA,G,qDAME,IAAD,OACP,OAEE,sBAAKC,UAAWS,KAAKV,MAAME,SAAW,YAAc,OAApD,UACE,sBAAKD,UAAU,QAAf,UACE,uBAAOO,KAAK,OAAOG,SAAUD,KAAKV,MAAMY,aAAcC,YAAY,8DAClE,wBAAQZ,UAAU,UAAUG,QAAS,kBAAM,EAAKJ,MAAMc,SAAS,EAAKd,MAAMe,UAA1E,qBAEF,6BACGL,KAAKV,MAAMgB,QAAQC,KAAI,SAAAV,GAAI,OAC5B,cAAC,EAAD,CACAA,KAAMA,EACNL,SAAU,EAAKF,MAAME,uB,GApBRgB,IAAMC,WCgEdC,E,kDA5Db,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXnB,UAAU,EACVa,QAAS,GACTC,QAAS,IAEX,EAAKJ,aAAe,EAAKA,aAAaU,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKR,SAAW,EAAKA,SAASQ,KAAd,gBAChB,EAAKjB,eAAiB,EAAKA,eAAeiB,KAApB,gBAVL,E,6DAcjBZ,KAAKc,SAAS,CAACtB,UAAWQ,KAAKW,MAAMnB,a,mCAG1BuB,GACX,IAAIC,EAASD,EAAEC,OAAOC,MACtBjB,KAAKc,SAAS,CAACT,QAASW,M,+BAGjBE,GACW,IAAfA,EAAIC,OACLnB,KAAKa,SAASK,GAGdE,MAAM,+D,+BAKDvB,GACPG,KAAKc,UAAS,SAAAO,GACZ,MAAO,CAACf,QAAQ,GAAD,mBAAMe,EAAUf,SAAhB,CAAyBT,U,+BAK1C,OACE,sBAAKN,UAAWS,KAAKW,MAAMnB,SAAW,WAAa,MAAnD,UACE,cAAC,EAAD,CAAOA,SAAUQ,KAAKW,MAAMnB,WAC5B,qBAAKD,UAAWS,KAAKW,MAAMnB,SAAW,gBAAkB,WAAxD,SACE,cAAC,EAAD,CACAG,eAAgBK,KAAKL,eACrBH,SAAUQ,KAAKW,MAAMnB,aAGvB,cAAC,EAAD,CACAU,aAAcF,KAAKE,aACnBE,SAAUJ,KAAKI,SACfC,QAASL,KAAKW,MAAMN,QACpBC,QAASN,KAAKW,MAAML,QACpBd,SAAUQ,KAAKW,MAAMnB,kB,GAtDXgB,IAAMC,WCMTa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1bb642b.chunk.js","sourcesContent":["import App from './App';\nimport React from 'react';\n\n\n\nfunction Title(props) {\n  return (\n    <h1 className={props.isDarkOn ? 'title-dark' : 'title'}>Todo List</h1>\n  );\n}\n\n\n\n\n\n\n\n\nexport default Title;\n","\nimport React from 'react';\n\n\n\nfunction Tap(props) {\n  return (\n    <div>\n      <button\n      className={props.isDarkOn ? \"darkbutton-dark\" : \"darkbutton\"}\n      onClick={props.turnOnDarkMode}\n      >\n        <span/>\n        Push to Darkmode\n      </button>\n    </div>\n  );\n}\n\nexport default Tap;","import React from 'react';\n\nfunction Todo(props) {\n  return (\n    <li className={props.isDarkOn ? \"todo-dark\" : \"todo\"}>\n      {props.todo}\n      <input type=\"checkbox\"/>\n    </li>\n  )\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo.js';\n\nclass Todolist extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n\n\n\n  render() {\n    return (\n      \n      <div className={this.props.isDarkOn ? \"List-dark\" : \"List\"}>\n        <div className=\"input\">\n          <input type=\"text\" onChange={this.props.handleChange} placeholder='내용을 입력해 주세요!'/>\n          <button className=\"addList\" onClick={() => this.props.PostToDo(this.props.texting)}>Post</button>\n        </div>\n        <ul>\n          {this.props.allList.map(todo => \n          <Todo\n          todo={todo}\n          isDarkOn={this.props.isDarkOn}\n          />\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Todolist;","import '../App.css';\nimport React from 'react';\nimport Title from './Title.js';\nimport Tap from './Tap.js';\nimport Todolist from './Todolist.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDarkOn: false,\n      texting: '',\n      allList: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.listPush = this.listPush.bind(this);\n    this.PostToDo = this.PostToDo.bind(this);\n    this.turnOnDarkMode = this.turnOnDarkMode.bind(this);\n  }\n\n  turnOnDarkMode() {\n    this.setState({isDarkOn: !this.state.isDarkOn});\n  }\n\n  handleChange(e) {\n    let target = e.target.value;\n    this.setState({texting: target});\n  }\n\n  PostToDo(val) {\n    if(val.length !== 0) {\n      this.listPush(val);\n    }\n    else {\n      alert('내용을 입력해 주세요!')\n    }\n    \n  }\n\n  listPush(todo) {\n    this.setState(prevState => {\n      return {allList: [...prevState.allList, todo]}\n    });\n  }\n\n  render() {\n    return (\n      <div className={this.state.isDarkOn ? \"App-dark\" : \"App\"}>\n        <Title isDarkOn={this.state.isDarkOn}/>\n        <div className={this.state.isDarkOn ? \"Catalina-dark\" : \"Catalina\"}>\n          <Tap\n          turnOnDarkMode={this.turnOnDarkMode}\n          isDarkOn={this.state.isDarkOn}\n          />\n        </div>\n        <Todolist\n        handleChange={this.handleChange}\n        PostToDo={this.PostToDo}\n        texting={this.state.texting}\n        allList={this.state.allList}\n        isDarkOn={this.state.isDarkOn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}